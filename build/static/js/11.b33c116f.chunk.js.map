{"version":3,"sources":["components/forms/Form.tsx","components/forms/SiteEntry.tsx"],"names":["Form","defaults","data","_this","this","result","Object","keys","forEach","e","_home_vibhanshu_Documents_RealEstate_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","type","default","getDate","Array","current","mapping","value","Boolean","Error","mergeData","_this2","_this$props$match$par","props","match","params","_this$props$match$par2","edit","restParams","_home_vibhanshu_Documents_RealEstate_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_this$props","query","_this$props$getQueryV","getQueryVariables","_ref","id","prevDefaults","skipOnUpdate","clientOnly","filter","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_Query__WEBPACK_IMPORTED_MODULE_10__","variables","fetchPolicy","_ref2","loading","error","newDefaults","assign","children","Function","update","queryResult","PureComponent","TotalCostComponent","withFormState","values","formState","totalCost","managerTotalCost","element","Number","cost","paid","react__WEBPACK_IMPORTED_MODULE_10___default","Fragment","style","color","toCurrency","CreateSiteEntry","user","siteId","repeater","quantity","required","startAdornment","_material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_7___default","position","mistri","labour","eit","morang","baalu","githi","cement","saria","dust","other","other2","label","note","createdAt","isAdmin","_Query__WEBPACK_IMPORTED_MODULE_15__","gql","_templateObject","stocks","edges","stock","name","available","_Form__WEBPACK_IMPORTED_MODULE_16__","SITE_ENTRY","ldefaults","_FormGenerator__WEBPACK_IMPORTED_MODULE_17__","mutation","UPDATE_SITE_ENTRY","CREATE_SITE_ENTRY","title","submitText","mutateFunc","fn","formData"],"mappings":"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","file":"static/js/11.b33c116f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport { getDate } from '../../utils/date'\nimport filter from '../../utils/filter'\nimport Query from '../Query'\n\ninterface IFormProps {\n  match?: any\n  query: string\n  defaults: any\n  skipOnUpdate?: string[]\n  clientOnly?: string[]\n}\n\nexport interface IProps {\n  match: any\n}\nclass Form extends PureComponent<IFormProps> {\n  mergeData(defaults: any, data: any) {\n    const result: any = {}\n    Object.keys(defaults).forEach(e => {\n      result[e] = { ...defaults[e] }\n      if (defaults[e].type === 'date') {\n        result[e].default = getDate(data[e])\n      } else if (defaults[e].default instanceof Array) {\n        result[e].current =\n          data[e] &&\n          (data[e][result[e].mapping && result[e].mapping.value] || data[e])\n      } else if (\n        typeof defaults[e].default === 'string' ||\n        typeof defaults[e].default === 'number'\n      ) {\n        result[e].default = data[e]\n      } else if (defaults[e].type === Boolean) {\n        result[e].default = data[e]\n      } else if (defaults[e].type === 'custom') {\n        // result[e].default = data[e]\n      } else if (defaults[e].default instanceof Object) {\n        result[e].default = { ...this.mergeData(defaults[e].default, data[e]) }\n      } else {\n        throw new Error('merge error')\n      }\n    })\n    return result\n  }\n  render() {\n    const { edit = false, ...restParams }: any = this.props.match.params\n    const {\n      query,\n      getQueryVariables = ({ id }: { id: string }) => ({ id }),\n      defaults: prevDefaults,\n      skipOnUpdate,\n      clientOnly,\n    }: any = this.props\n    let defaults = prevDefaults\n    if (edit === 'edit') {\n      defaults = filter(prevDefaults, skipOnUpdate)\n      return (\n        <Query\n          query={query}\n          variables={getQueryVariables(restParams)}\n          fetchPolicy='cache-and-network'\n        >\n          {({ loading, error, data }: IGraphqlData) => {\n            if (loading) {\n              return <span>loading...</span>\n            } else if (error) {\n              return <span>Error Occured!</span>\n            }\n            let newDefaults = this.mergeData(\n              filter(defaults, clientOnly),\n              data[Object.keys(data)[0]],\n            )\n            newDefaults = Object.assign(defaults, newDefaults)\n            return (\n              this.props.children instanceof Function &&\n              this.props.children({\n                update: true,\n                defaults: newDefaults,\n                queryResult: data,\n              })\n            )\n          }}\n        </Query>\n      )\n    }\n    // else {\n    //   defaults = filter(defaults, clientOnly)\n    // }\n    return (\n      this.props.children instanceof Function &&\n      this.props.children({ update: false, defaults, queryResult: null })\n    )\n  }\n}\n\nexport default Form\n","import InputAdornment from '@material-ui/core/InputAdornment'\nimport gql from 'graphql-tag'\nimport { withFormState } from 'informed'\nimport React, { PureComponent } from 'react'\nimport {\n  CREATE_SITE_ENTRY,\n  UPDATE_SITE_ENTRY,\n} from '../../graphql/mutation/remote'\nimport { SITE_ENTRY } from '../../graphql/query/remote'\nimport { getDate } from '../../utils/date'\nimport toCurrency from '../../utils/toCurrency'\nimport Query from '../Query'\nimport Form from './Form'\nimport FormGenerator from './FormGenerator'\n\nconst TotalCostComponent = withFormState(((props: any) => {\n  const values = props.formState.values\n  let totalCost = 0\n  let managerTotalCost = 0\n  Object.values(values).forEach((element: any) => {\n    totalCost += Number(element.cost) || 0\n    managerTotalCost += (element.paid && Number(element.cost)) || 0\n  })\n  return (\n    <>\n      <p style={{ color: 'green' }}>\n        <label>Manager Total Cost:</label> {toCurrency(managerTotalCost)}\n      </p>\n      <p style={{}}>\n        <label>Total Cost:</label> {toCurrency(totalCost)}\n      </p>\n    </>\n  )\n}) as any)\n\n// const StockAvailComponent = withFormState(((props: any) => {\n//     const values = props.formState.values;\n//     let available = values[props.stock];\n//     return <>\n//         <p style={{ color: 'green' }}><label>Available: </label> {available}</p>\n//     </>\n// }) as any)\nclass CreateSiteEntry extends PureComponent<any> {\n  render() {\n    const { user } = this.props\n    const { siteId, id } = this.props.match.params\n    const repeater = {\n      quantity: {\n        type: 'number',\n        default: 0,\n        required: true,\n      },\n      cost: {\n        type: 'number',\n        default: 0,\n        required: true,\n        startAdornment: <InputAdornment position='start'>₹</InputAdornment>,\n        // validate: validate(\"mistri\")\n      },\n      paid: {\n        type: Boolean,\n        default: false,\n        required: true,\n      },\n    }\n    const defaults: IFormGenerator = {\n      mistri: {\n        default: { ...repeater },\n      },\n      labour: {\n        default: { ...repeater },\n      },\n      eit: {\n        default: { ...repeater },\n      },\n      morang: {\n        default: { ...repeater },\n      },\n      baalu: {\n        default: { ...repeater },\n      },\n      githi: {\n        default: { ...repeater },\n      },\n      cement: {\n        default: { ...repeater },\n      },\n      saria: {\n        default: { ...repeater },\n      },\n      dust: {\n        default: { ...repeater },\n      },\n      other: {\n        default: {\n          quantity: {\n            type: 'text',\n            default: 'N/A',\n            required: true,\n          },\n          cost: {\n            type: 'number',\n            default: 0,\n            required: true,\n          },\n          paid: {\n            type: Boolean,\n            default: false,\n            required: true,\n          },\n        },\n      },\n      other2: {\n        label: 'other 2',\n        default: {\n          quantity: {\n            type: 'text',\n            default: 'N/A',\n            required: true,\n          },\n          cost: {\n            type: 'number',\n            default: 0,\n            required: true,\n          },\n          paid: {\n            type: Boolean,\n            default: false,\n            required: true,\n          },\n        },\n      },\n      note: {\n        type: 'text',\n        default: '',\n      },\n      createdAt: user.isAdmin()\n        ? {\n            type: 'date',\n            default: getDate(),\n          }\n        : null,\n      totalCost: {\n        type: 'custom',\n        default: <TotalCostComponent />,\n      },\n    }\n    return (\n      <Query\n        query={gql`\n          query {\n            stocks {\n              totalCount\n              edges {\n                name\n                available\n              }\n            }\n          }\n        `}\n      >\n        {({ data }: IGraphqlData) => {\n          data.stocks.edges.forEach((stock: any) => {\n            defaults[stock.name].default.quantity = {\n              ...defaults[stock.name].default.quantity,\n            }\n            defaults[stock.name].default = {\n              available: {\n                type: 'custom',\n                default: (\n                  <span style={{ color: 'green' }}>\n                    Stock Available: {toCurrency(stock.available)}\n                  </span>\n                ),\n              },\n              ...defaults[stock.name].default,\n            }\n            // defaults[stock.name].label = (defaults[stock.name].label || stock.name) + `(${stock.available})`\n          })\n          return (\n            <Form\n              {...this.props}\n              query={SITE_ENTRY}\n              defaults={defaults}\n              clientOnly={['totalCost']}\n            >\n              {({ update, defaults: ldefaults }: IFormProps) => {\n                return (\n                  <FormGenerator\n                    {...this.props}\n                    defaults={ldefaults}\n                    mutation={update ? UPDATE_SITE_ENTRY : CREATE_SITE_ENTRY}\n                    title={!update ? 'Create a new entry' : 'Update this entry'}\n                    submitText={!update ? 'Create entry' : 'Update entry'}\n                    mutateFunc={(fn, formData) => {\n                      return fn({ variables: { siteId, id, data: formData } })\n                    }}\n                  />\n                )\n              }}\n            </Form>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default CreateSiteEntry\n"],"sourceRoot":""}