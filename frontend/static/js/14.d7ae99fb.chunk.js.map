{"version":3,"sources":["components/Dialogs/PropertyCreditDialog.tsx","pages/Property.tsx"],"names":["defaults","amount","type","default","startAdornment","react_default","a","createElement","InputAdornment_default","position","note","nextDueDate","getDate","validate","val","Date","getTime","withStyles","styles","_CommanDialog","FormDialog","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","open","state","_this$props","props","classes","history","selected","_this$props$negativeH","negativeHandler","handleClose","_this$props$positiveH","positiveHandler","_this$props$postMutat","postMutation","title","Mutation","mutation","PROPERTY_CREDIT","mutate","_ref","loading","error","data","Fragment","IconButton_default","aria-label","onClick","handleOpen","AttachMoney_default","Dialog_default","fullScreen","onClose","aria-labelledby","dist","onSubmit","e","then","goBack","DialogTitle_default","id","DialogContent_default","DialogContentText_default","getJSX","DialogActions_default","CircularProgress_default","className","progress","index_es","message","Button_default","color","autoFocus","size","disabled","CommanDialog","propertyColumnData","numeric","disablePadding","colSpan","label","propertyExclude","PropertyTableRenderer","customRootClasses","dloading","deleteProperties","wrapper","restProps","objectWithoutProperties","tableMutation","tableQuery","ds","defaultState","dataQuery","getQueryVariables","TableWrapper","tableSettings","lmutate","refetch","properties","keys","Table","assign","settings","count","length","columnData","skipHistoryColumns","exclude","historyable","PROPERTY_CREDIT_HISTORY","credit","PropertyCreditDialog","m","variables","objectSpread","primaryButtonIcon","Home_default","options","onEdit","push","Routes","Property","update","edit","onCredit","_onCredit","asyncToGenerator","regenerator_default","mark","_callee","fn","args","wrap","_context","prev","next","stop","_x","_x2","onDelete","_onDelete","_callee2","_context2","_x3","onAdd","create","render","commanRender","match","renderValue","_ref2","formatDate","getContactJSX","result","RENDER_VALUE","skip","String","_ref3","_callee3","_context3","_x4","theme","createStyles","root","width","duePropertyRoot","backgroundColor","fab","bottom","spacing","unit","right","Grid_default","container","item","xs","DELETE_PROPERTIES","_ref4","Query","query","PROPERTY_CREDIT_HISTORY_TOTAL","_ref5","propertyTotal","style","padding","margin","justify","variant","toCurrency","price","totalReceivedAmount","balance","Property_PropertyTableRenderer","DUE_PROPERTY_TABLE","DUE_PROPERTY_TABLE_QUERY","duePropertyTable","DUE_PROPERTIES","_","PROPERTY_TABLE","PROPERTY_TABLE_QUERY","propertyTable","PROPERTIES"],"mappings":"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","file":"static/js/14.d7ae99fb.chunk.js","sourcesContent":["import { FormHelperText } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport { withStyles } from '@material-ui/core/styles'\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney'\nimport { Form } from 'informed'\nimport React from 'react'\nimport { PROPERTY_CREDIT } from '../../graphql/mutation/remote'\n// import { defaults as propertyDefaults } from '../forms/CreateProperty';\nimport { getDate } from '../../utils/date'\nimport { getJSX } from '../forms/FormGenerator'\nimport Mutation from '../Mutation'\nimport CommanDialog, { IProps, styles } from './CommanDialog'\n\nconst defaults = {\n  amount: {\n    type: 'number',\n    default: 0,\n    startAdornment: <InputAdornment position='start'>₹</InputAdornment>,\n  },\n  note: {\n    type: 'text',\n    default: '',\n    // startAdornment: <InputAdornment position='start'>₹</InputAdornment>,\n  },\n  nextDueDate: {\n    type: 'date',\n    default: getDate(),\n    validate: (val: any) => {\n      if (new Date(val).getTime() <= new Date(getDate()).getTime()) {\n        return 'Must be a future date'\n      }\n      return null\n    },\n  },\n}\n\ninterface IFormDialog extends IProps {\n  selected?: string\n}\n\nexport default withStyles(styles)(\n  class FormDialog extends CommanDialog<IFormDialog> {\n    render() {\n      const { open } = this.state\n      const {\n        classes,\n        history,\n        selected,\n        negativeHandler = () => this.handleClose(),\n        positiveHandler = () => null,\n        postMutation = () => null,\n      } = this.props\n      const title = 'Add Credit'\n      const content = 'Add credit amount to this property.'\n      return (\n        <div>\n          <Mutation mutation={PROPERTY_CREDIT}>\n            {(mutate: Function, { loading, error, data }: IGraphqlData) => {\n              return (\n                <React.Fragment>\n                  <IconButton\n                    aria-label='Credit'\n                    title='Credit'\n                    onClick={this.handleOpen}\n                  >\n                    <AttachMoneyIcon />\n                  </IconButton>\n                  {open ? (\n                    <Dialog\n                      fullScreen={false}\n                      open={open}\n                      onClose={negativeHandler}\n                      aria-labelledby={title}\n                      title={title}\n                    >\n                      <Form\n                        onSubmit={(e: any) => {\n                          positiveHandler(mutate, { data: e }, selected).then(\n                            (data: any) => {\n                              if (postMutation) {\n                                postMutation(data)\n                                this.handleClose()\n                              } else {\n                                history.goBack()\n                              }\n                            },\n                          )\n                        }}\n                      >\n                        <DialogTitle id={title}>{title}</DialogTitle>\n                        <DialogContent>\n                          <DialogContentText>{content}</DialogContentText>\n                          {getJSX(defaults)}\n                        </DialogContent>\n                        <DialogActions>\n                          {loading ? (\n                            <CircularProgress className={classes.progress} />\n                          ) : null}\n                          {error ? (\n                            <FormHelperText error={true}>\n                              {error.message}\n                            </FormHelperText>\n                          ) : null}\n                          <Button\n                            onClick={negativeHandler}\n                            color='primary'\n                            autoFocus={true}\n                          >\n                            Cancel\n                          </Button>\n                          <Button size='large' type='submit' disabled={loading}>\n                            Confirm\n                          </Button>\n                        </DialogActions>\n                      </Form>\n                    </Dialog>\n                  ) : null}\n                </React.Fragment>\n              )\n            }}\n          </Mutation>\n        </div>\n      )\n    }\n  },\n)\n","import { Paper, Typography } from '@material-ui/core'\nimport Grid from '@material-ui/core/Grid'\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core/styles'\nimport HomeIcon from '@material-ui/icons/Home'\nimport React from 'react'\nimport PropertyCreditDialog from '../components/Dialogs/PropertyCreditDialog'\nimport EnhancedTable from '../components/Enhanced/Table/Table'\nimport Mutation from '../components/Mutation'\nimport Query from '../components/Query'\nimport TableWrapper from '../components/TableWrapper'\nimport { DUE_PROPERTY_TABLE, PROPERTY_TABLE } from '../graphql/mutation/local'\nimport { DELETE_PROPERTIES } from '../graphql/mutation/remote'\nimport {\n  DUE_PROPERTY_TABLE as DUE_PROPERTY_TABLE_QUERY,\n  PROPERTY_TABLE as PROPERTY_TABLE_QUERY,\n} from '../graphql/query/local'\nimport {\n  DUE_PROPERTIES,\n  PROPERTIES,\n  PROPERTY_CREDIT_HISTORY,\n  PROPERTY_CREDIT_HISTORY_TOTAL,\n} from '../graphql/query/remote'\nimport { defaultState } from '../graphql/resolvers'\nimport { Routes } from '../Router'\nimport commanRender, { RENDER_VALUE } from '../utils/commanRender'\nimport { formatDate } from '../utils/date'\nimport getContactJSX from '../utils/getContactJSX'\nimport toCurrency from '../utils/toCurrency'\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    duePropertyRoot: {\n      backgroundColor: 'rgba(255, 0, 0, 0.1)',\n    },\n    fab: {\n      position: 'fixed',\n      width: '4rem',\n      bottom: theme.spacing.unit * 2,\n      right: theme.spacing.unit * 2,\n    },\n  })\n\nexport const propertyColumnData = [\n  {\n    id: 'createdAt',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Created At',\n  },\n  {\n    id: 'name',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Name',\n  },\n  {\n    id: 'location',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Location',\n  },\n  {\n    id: 'price',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Price (₹)',\n  },\n  {\n    id: 'buyer',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Bought By',\n  },\n  {\n    id: 'buyerNumber',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Buyer\\'s Phone Number',\n  },\n  {\n    id: 'totalReceivedAmount',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Total Received Amount (₹)',\n  },\n  {\n    id: 'balance',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Balance Amount (₹)',\n  },\n  {\n    id: 'nextDueDate',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Next Due Date',\n  },\n  {\n    id: 'note',\n    numeric: false,\n    disablePadding: false,\n    colSpan: 1,\n    label: 'Note',\n  },\n]\nexport const propertyExclude = [\n  'id',\n  'count',\n  'createdAt',\n  'updatedAt',\n  '__typename',\n]\n\nconst PropertyTableRenderer = (props: any) => {\n  const {\n    customRootClasses,\n    title,\n    loading: dloading,\n    history,\n    deleteProperties,\n    wrapper,\n    ...restProps\n  } = props\n  const {\n    tableMutation,\n    tableQuery,\n    defaultState: ds,\n    dataQuery,\n    getQueryVariables,\n  } = wrapper\n  return (\n    <TableWrapper\n      tableMutation={tableMutation}\n      tableQuery={tableQuery}\n      defaultState={ds}\n      dataQuery={dataQuery}\n      getQueryVariables={getQueryVariables}\n    >\n      {(\n        tableSettings: any,\n        lmutate: Function,\n        { loading, data, refetch }: IGraphqlData,\n      ) => {\n        const properties = data[Object.keys(data)[0]]\n        return (\n          <EnhancedTable\n            {...restProps}\n            loading={loading || dloading}\n            data={properties}\n            title={title}\n            settings={tableSettings}\n            count={\n              (properties.length && properties[0].count) || properties.length\n            }\n            columnData={propertyColumnData}\n            customRootClasses={customRootClasses}\n            skipHistoryColumns={['type']}\n            exclude={propertyExclude}\n            historyable={PROPERTY_CREDIT_HISTORY}\n            credit={\n              <PropertyCreditDialog\n                {...restProps}\n                positiveHandler={(m, e, selected) =>\n                  m({ variables: { ...e, id: selected } })\n                }\n              />\n            }\n            primaryButtonIcon={<HomeIcon />}\n            // menu={<EnhancedMenu/>}\n            options={{\n              onEdit: (e: any) =>\n                history.push(\n                  Routes.Property.update({\n                    id: e,\n                    edit: true,\n                  }),\n                ),\n              onCredit: async (fn: Function, args: any) => {\n                await fn({ variables: args })\n                // refetch();\n              },\n              onDelete: async (args: any) => {\n                await deleteProperties({ variables: args })\n                await lmutate({\n                  variables: defaultState,\n                })\n                refetch()\n              },\n              onAdd: () => history.push(Routes.Property.create()),\n            }}\n            // render={(key: string, items: any, colorValue: string) => {\n            //   console.log(items)\n            //   if (key.includes('price')) {\n            //     const value = items\n            //     const bgcolor = value ? BACKGROUND_COLOR : undefined\n            //     return (\n            //       <TableCell\n            //         style={{\n            //           // color: val.color || colorValue,\n            //           backgroundColor: bgcolor,\n            //         }}\n            //       >\n            //         {value}\n            //       </TableCell>\n            //     )\n            //   }\n            //   return (\n            //     <TableCell\n            //       style={{\n            //         color: colorValue,\n            //       }}\n            //     >\n            //       {items}\n            //     </TableCell>\n            //   )\n            // }}\n            render={commanRender({\n              match: 'totalReceivedAmount',\n              renderValue: ({ key, value }: { key: string; value: any }) => {\n                if (key === 'nextDueDate') {\n                  return { value: formatDate(value) }\n                } else if (key === 'buyerNumber') {\n                  return { value: getContactJSX(value) }\n                }\n                const result = RENDER_VALUE({\n                  key,\n                  value,\n                  skip: ['buyerNumber'],\n                })\n                return {\n                  ...result,\n                  value: String(value).length ? result.value : '-',\n                }\n              },\n            })}\n            mutate={async args => {\n              await lmutate({ variables: args })\n              // refetch();\n            }}\n          />\n        )\n      }}\n    </TableWrapper>\n  )\n}\n\ninterface IProperty extends WithStyles<typeof styles> {\n  history?: any\n}\nconst Property = withStyles(styles)((props: IProperty) => {\n  const { classes, history, ...restProps } = props\n  return (\n    <div>\n      <Grid container={true} className={classes.root}>\n        <Grid item={true} xs={12}>\n          <Mutation mutation={DELETE_PROPERTIES}>\n            {(\n              deleteProperties: Function,\n              { loading: dloading }: IGraphqlData,\n            ) => {\n              return (\n                <React.Fragment>\n                  <Query query={PROPERTY_CREDIT_HISTORY_TOTAL}>\n                    {({ loading, data: { propertyTotal } }: IGraphqlData) => {\n                      return (\n                        <Paper\n                          style={{\n                            padding: '2rem',\n                            margin: '1rem 0rem',\n                          }}\n                        >\n                          <Grid container spacing={16} justify='space-between'>\n                            <Grid item>\n                              <Typography variant='h5' color='primary'>\n                                Total Price (₹):{' '}\n                                {toCurrency(propertyTotal.price)}\n                              </Typography>\n                            </Grid>\n                            <Grid item>\n                              <Typography variant='h5'>\n                                Total Received Amount (₹):{' '}\n                                {toCurrency(propertyTotal.totalReceivedAmount)}\n                              </Typography>\n                            </Grid>\n                            <Grid item>\n                              <Typography\n                                variant='h5'\n                                color={\n                                  propertyTotal.balance < 0\n                                    ? 'primary'\n                                    : 'secondary'\n                                }\n                              >\n                                Total Balance (₹):{' '}\n                                {toCurrency(propertyTotal.balance)}\n                              </Typography>\n                            </Grid>\n                          </Grid>\n                        </Paper>\n                      )\n                    }}\n                  </Query>\n                  <PropertyTableRenderer\n                    {...restProps}\n                    customRootClasses={[classes.duePropertyRoot]}\n                    title='Due Properties'\n                    loading={dloading}\n                    history={history}\n                    deleteProperties={deleteProperties}\n                    wrapper={{\n                      tableMutation: DUE_PROPERTY_TABLE,\n                      tableQuery: DUE_PROPERTY_TABLE_QUERY,\n                      defaultState: defaultState.duePropertyTable,\n                      dataQuery: DUE_PROPERTIES,\n                      getQueryVariables: (_: any) => ({}),\n                    }}\n                  />\n                  <PropertyTableRenderer\n                    {...restProps}\n                    title='Properties'\n                    loading={dloading}\n                    history={history}\n                    deleteProperties={deleteProperties}\n                    wrapper={{\n                      tableMutation: PROPERTY_TABLE,\n                      tableQuery: PROPERTY_TABLE_QUERY,\n                      defaultState: defaultState.propertyTable,\n                      dataQuery: PROPERTIES,\n                      getQueryVariables: (_: any) => ({}),\n                    }}\n                  />\n                </React.Fragment>\n              )\n            }}\n          </Mutation>\n        </Grid>\n      </Grid>\n    </div>\n  )\n})\n\nexport default Property\n"],"sourceRoot":""}